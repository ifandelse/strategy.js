/*
 strategy.js
 Author: Jim Cowart (http://freshbrewedcode.com/jimcowart)
 License: Dual licensed MIT (http://www.opensource.org/licenses/mit-license) & GPL (http://www.opensource.org/licenses/gpl-license)
 Version 0.0.1
 */
describe("strategy.js",function(){describe("when creating a new instance with lazyInit = true",function(){describe("with NO strategies in use",function(){var t,e={name:"Jimbabwe",doStuff:function(t,e){e("Hi, "+this.name+" - "+t)}};before(function(){t=e.doStuff,e.doStuff=new Strategy({owner:e,prop:"doStuff",context:e,lazyInit:!0})}),it("should not replace the method yet",function(){expect(e.doStuff).to.be(t)}),it("should return the expected value",function(){e.doStuff("here's your msg...",function(t){expect(t).to.be("Hi, Jimbabwe - here's your msg...")})})}),describe("with strategies in use",function(){var t,e={name:"Jimbabwe",doStuff:function(t,e){e("Hi, "+this.name+" - "+t)}};before(function(){t=e.doStuff,e.doStuff=new Strategy({owner:e,prop:"doStuff",context:e,lazyInit:!0}),e.doStuff.useStrategy({name:"test1",fn:function(t,e){t("Yo dawg..."+e)}})}),it("should replace the method",function(){expect(e.doStuff).to.not.be(t)}),it("should be able to see original target on strategy instance",function(){expect(e.doStuff.target()).to.be(t)}),it("should show a strategy in the array",function(){expect(e.doStuff.strategies().length).to.be(1)}),it("should return the expected value",function(){it("should return the expected value",function(){e.doStuff("here's your msg...",function(t){expect(t).to.be("Hi, Jimbabwe - Yo dawg...here's your msg...")})})})})}),describe("when resetting strategies",function(){var t,e={name:"Jimbabwe",doStuff:function(t,e){e("Hi, "+this.name+" - "+t)}};before(function(){t=e.doStuff,e.doStuff=new Strategy({owner:e,prop:"doStuff",context:e}),e.doStuff.useStrategy({name:"test1",fn:function(t,e){t("Yo dawg..."+e)}}),e.doStuff.reset()}),it("should replace the method",function(){expect(e.doStuff).to.not.be(t)}),it("should be able to see original target on strategy instance",function(){expect(e.doStuff.target()).to.be(t)}),it("should NOT show a strategy in the array",function(){expect(e.doStuff.strategies().length).to.be(0)}),it("should return the expected value",function(){it("should return the expected value",function(){e.doStuff("here's your msg...",function(t){expect(t).to.be("Hi, Jimbabwe - here's your msg...")})})})}),describe("when providing a strategy-specific context",function(){var t,e={name:"Jimbabwe",doStuff:function(t,e){e("Hi, "+this.name+" - "+t)}},n={name:"Your mom"};before(function(){t=e.doStuff,e.doStuff=new Strategy({owner:e,prop:"doStuff",context:e}),e.doStuff.useStrategy({name:"test1",fn:function(t,e){t("Yo dawg..."+this.name+" says '"+e+"'")},context:n})}),it("should replace the method",function(){expect(e.doStuff).to.not.be(t)}),it("should be able to see original target on strategy instance",function(){expect(e.doStuff.target()).to.be(t)}),it("should show a strategy in the array",function(){expect(e.doStuff.strategies().length).to.be(1)}),it("should return the expected value",function(){it("should return the expected value",function(){e.doStuff("here's your msg...",function(t){expect(t).to.be("Hi, Jimbabwe - Yo dawg...Your mom says 'here's your msg...'")})})})})});